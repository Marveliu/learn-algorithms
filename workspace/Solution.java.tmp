import java.util.*;

/**
 * 301. Remove Invalid Parentheses
 * 
 * https://leetcode.com/problems/remove-invalid-parentheses/
 * 
 * 1. dfs 空间复杂度 2^n
 * 
 */
public class Solution {

    Set<String> res = null;
    int max = 0;

    public List<String> removeInvalidParentheses(String s) {
        res = new HashSet<>();
        max = 0;
        List<String> ans = new ArrayList<>();
        dfs("", 0, 0, 0, s);
        res.forEach(i -> {
            if (i.length() == max)
                ans.add(i);
        });
        return ans;
    }

    public void dfs(String str, int l, int r, int i, String s) {
        if (i == s.length()) {
            if (l == r && str.length() >= max) {
                res.add(str);
                max = str.length();
            }
            return;
        }
        char c = s.charAt(i);
        if (l < r) {
            return;
        }
        if (c == '(') {
            dfs(str, l, r, i + 1, s);
            dfs(str + c, l + 1, r, i + 1, s);
        } else if (c == ')') {
            dfs(str, l, r, i + 1, s);
            dfs(str + c, l, r + 1, i + 1, s);
        } else {
            dfs(str + c, l, r, i + 1, s);
        }
    }

    public static void main(String[] args) {
        Solution s = new Solution();
        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.println("Input>>>");
            s.removeInvalidParentheses(sc.nextLine()).forEach(i -> {
                System.out.println(i);
            });
        }
    }
}
