import java.util.*;

public class Solution {

    public boolean canPartition(int[] nums) {
        int sum = 0;
        int len = nums.length;
        for (int v : nums) {
            sum += v;
        }
        if (sum % 2 != 0)
            return false;
        List<Integer>[] dp = new List[len + 1];
        dp[0] = new ArrayList<Integer>();
        Set<Integer> sets = new HashSet<>();
        for (int i = 0; i < len; i++) {
            int cur = nums[i];
            dp[i + 1] = dp[i];
            List<Integer> tmp = new ArrayList<>();
            for (int v : dp[i + 1]) {
                int n = v + cur;
                if (!sets.contains(n)) {
                    sets.add(n);
                    tmp.add(n);
                }
            }
            dp[i + 1].addAll(tmp);
            if (!sets.contains(cur)) {
                dp[i + 1].add(cur);
                sets.add(cur);
            }
            if (sets.contains(sum / 2)) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        Solution s = new Solution();
        while (true) {
            Scanner sc = new Scanner(System.in);
            System.out.println("Input>>>");
            System.out.println(s.canPartition(StringUtil.getIntArr(sc)));
        }
    }
}
